module std::collections::deque;

class ArrayDeque[T] {
    buffer: [T];
    length: u64;
    head: u64;
    tail: u64;

    pub fn create() -> ArrayDeque[T] {
        let deque: ArrayDeque[T] = new ArrayDeque[T]();
        deque.buffer = new [T; 0];
        deque.head = 0;
        deque.tail = 0;
        deque.length = 0;
        return deque;
    }

    pub fn from-array(arr: [T]) -> ArrayDeque[T] {
        let deque: ArrayDeque[T] = new ArrayDeque[T]();
        let buff: [T] = new [T; arr.len()];
        let i: u64 = 0;
        while i < arr.len() {
            buff[i] = arr[i];
            i = i + 1;
        }
        deque.buffer = buff;
        deque.length = arr.len();
        deque.tail = arr.len();
        return deque;
    }

    pub fn len(self) -> u64 {
        return self.length;
    }

    pub fn capacity(self) -> u64 {
        return self.buffer.len();
    }

    pub fn get(self, index: u64) -> T {
        let offset: u64 = self.head + 1;
        let real-index: u64 = (index + offset) % self.buffer.len();
        return self.buffer[real-index];
    }

    pub fn set(self, index: u64, value: T) {
        let offset: u64 = self.head + 1;
        let real-index: u64 = (index + offset) % self.buffer.len();
        self.buffer[real-index] = value;
    }

    pub fn resize(self, size: u64) {
        let new-buff: [T] = new [T; size];

        let length: u64 = 0;
        if size > self.capacity() {
            length = self.length;
        } else {
            length = size;
        }

        let i: u64 = 0;
        while i < length {
            new-buff[i] = self.get(i);
            i = i + 1;
        }

        self.buffer = new-buff;
        self.head = 0;
        self.tail = self.length;
    }

    fn resize-if-needed(self, amount-needed: u64) {
        if amount-needed > (self.capacity() - self.len()) {
            let factor: u64 = self.capacity() * 2;
            if factor == 0 {
                factor = 1;
            }
            self.resize(factor);
        }
    }

    pub fn push-front(self, value: T) {
        let size: u64 = 1;
        self.resize-if-needed();

        let new-tail: u64 = self.tail;
        if self.length == 0 {
            new-tail = self.tail + 1;
        }
        let new-head: u64 = (self.head - 1) % self.length;
        self.buffer[self.head] = value;
        self.head = new-head;
        self.tail = new-tail;
        self.length = self.length + 1;
    }

    pub fn pop-front(self) -> T {
        let index: u64 = (self.head + 1) % self.buffer.len();
        let item: T = self.buffer[index];
        //self.buffer[index] = 0; // TODO: figure out how to make this work with reference types
        self.length = self.length - 1;
        self.head = index;

        return item;
    }

    pub fn push-back(self, value: T) {
        let size: u64 = 1;
        self.resize-if-needed();

        let new-head: u64 = self.head;
        if self.length == 0 {
            new-head = self.head + 1;
        }
        let new-tail: u64 = (self.tail - 1) % self.length;
        self.buffer[self.tail] = value;
        self.head = new-head;
        self.tail = new-tail;
        self.length = self.length + 1;
    }

    pub fn pop-back(self) -> T {
        let index: u64 = (self.tail - 1) % self.buffer.len();
        let item: T = self.buffer[index];
        //self.buffer[index] = 0; // TODO: figure out how to make this work with reference types
        self.length = self.length - 1;
        self.tail = index;

        return item;
    }
}