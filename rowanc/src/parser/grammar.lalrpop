use crate::parser::lexer::{Token, TokenLexer, SpannedLexerError, LexerError};
use either::Either;
use crate::ast::*;
use lalrpop_util::ParseError;

grammar<'a>(input: &'a str);


extern {
    type Location = usize;
    type Error = SpannedLexerError;
    
    enum Token<'a> {
        "if" => Token::If,
        "else" => Token::Else,
        "match" => Token::Match,
        "fn" => Token::Fun,
        "return" => Token::Return,
        "break" => Token::Break,
        "continue" => Token::Continue,
        "while" => Token::While,
        "for" => Token::For,
        "in" => Token::In,
        "loop" => Token::Loop,
        "with" => Token::With,
        "as" => Token::As,
        "record" => Token::Record,
        "union" => Token::Union,
        "asa" => Token::AsA,
        "into" => Token::Into,
        "class" => Token::Class,
        "static" => Token::Static,
        "@" => Token::At,
        "extends" => Token::Extends,
        "new" => Token::New,
        "to" => Token::To,
        "self" => Token::This,
        "from" => Token::From,
        "let" => Token::Let,
        "const" => Token::Const,
        "mut" => Token::Mut,
        "import" => Token::Import,
        "module" => Token::Module,
        "pub" => Token::Pub,
        "prot" => Token::Prot,
        "u8" => Token::U8,
        "u16" => Token::U16,
        "u32" => Token::U32,
        "u64" => Token::U64,
        "i8" => Token::I8,
        "i16" => Token::I16,
        "i32" => Token::I32,
        "i64" => Token::I64,
        "f32" => Token::F32,
        "f64" => Token::F64,
        "char" => Token::Char,
        "bool" => Token::Bool,
        "void" => Token::Void,
        "str" => Token::Str,
        "True" => Token::True,
        "False" => Token::False,
        Int_lit => Token::IntLiteral(<Text<'a>>),
        Float_lit => Token::FloatLiteral(<Text<'a>>),
        Char_lit => Token::CharLiteral(<Text<'a>>),
        String_lit => Token::StringLiteral(<Text<'a>>),
        Identifier => Token::Identifier(<Text<'a>>),
        Plus => Token::Plus,
        Minus => Token::Minus,
        Mult => Token::Multiply,
        Div => Token::Divide,
        Mod => Token::Modulo,
        Not => Token::Not,
        Or => Token::Or,
        And => Token::And,
        Equals => Token::Equals,
        NotEquals => Token::NotEquals,
        LtE => Token::LessThanOrEqual,
        GtE => Token::GreaterThanOrEqual,
        Assign => Token::Assign,
        Concat => Token::Concat,
        "::" => Token::Scope,
        "{" => Token::BraceOpen,
        "}" => Token::BraceClose,
        "(" => Token::ParenOpen,
        ")" => Token::ParenClose,
        "[" => Token::BracketOpen,
        "]" => Token::BracketClose,
        AngleOpen => Token::AngleOpen,
        AngleClose => Token::AngleClose,
        "," => Token::Comma,
        ":" => Token::Colon,
        "?" => Token::QMark,
        "|" => Token::Bar,
        "." => Token::Dot,
        "->" => Token::Arrow,
        Lb => Token::LineBreak,
        "comment" => Token::Comment,
        Indent => Token::Indent,
        "eof" => Token::Eof,
    }
}


pub File: File<'a> = {
    "module" <p:Path> <id:Identifier> <pEnd: @L> Lb <decs:(Lb* <Decl>)*> Lb? => {
        let mut p = p;
        p.segments.push(id);
        p.span.end = pEnd;
        File::new(p, decs)
    },
    <decs:(Lb* <Decl>)*> Lb? => {
        let p = PathName::new(Vec::new(), Span::new(0, 0));
        File::new(p, decs)
    },
};

#[inline]
Path: PathName<'a> = {
    <start: @L> <segments:(<Identifier> "::")*> <end: @R> => {
        PathName::new(segments, Span::new(start, end))
    },
};

PathNoInline: PathName<'a> = {
    <start: @L> <segments:(<Identifier> "::")*> <end: @R> => {
        PathName::new(segments, Span::new(start, end))
    },
};

pub Visibility: Visibility = {
    <vis:("pub")?> => {
        match vis {
            Some(_) => Visibility::Public,
            None => Visibility::Private,
        }
    },
    <vis:("prot")> => {
        Visibility::Protected
    },
    
};

pub Decl: TopLevelStatement<'a> = {
    <start: @L> "import" <p:Path> <id:Identifier> <end: @R> => {
        let mut p = p;
        p.segments.push(id);
        p.span.end = end;
        TopLevelStatement::Import(Import::new(p, Span::new(start, end)))
    },
    <c:Class> => c
};

pub Class: TopLevelStatement<'a> = {
    <start: @L> "class" <name:Identifier> <type_params:TypeParamList?> <parents:ParentDecl?> "{" <class_members:ClassMembers> "}" <end: @R> => {
         let span = Span::new(start, end);
         let type_params = match type_params {
            Some(typ) => typ,
            None => Vec::new(),
         };
         let parents = match parents {
            Some(p) => p,
            None => Vec::new(),
         };
         let mut members = Vec::new();
         let mut methods = Vec::new();
         let mut static_members = Vec::new();
         for member in class_members {
            match member {
                ClassMember::Member(mem) => members.push(mem),
                ClassMember::Method(meth) => methods.push(meth),
                ClassMember::StaticMember(mem) => static_members.push(mem),
            }
         }
         TopLevelStatement::Class(Class::new(name, parents, members, methods, static_members, type_params, span))
    }
};

ParentDecl: Vec<ParentDec<'a>> = {
    "extends" <p1:ParentDec> <parents:("," <ParentDec>)*> => {
        let mut v = vec![p1];
        for p in parents.into_iter() {
            v.push(p);
        }
        v
    }
};

ParentDec: ParentDec<'a> = {
    <start: @L> <name:Identifier> <type_params:TypeParamList?> <end: @R> => {
        let type_params = match type_params {
            Some(tp) => tp,
            None => Vec::new(),
        };
        ParentDec {
            name,
            type_args: Vec::new(),
            type_params,
            span: Span::new(start, end),
        }
    },
    <start: @L> <name:Identifier> <type_args:TypeArgList> <type_params:TypeParamList?> <end: @R> => {
            let type_params = match type_params {
                Some(tp) => tp,
                None => Vec::new(),
            };
            ParentDec {
                name,
                type_args,
                type_params,
                span: Span::new(start, end),
            }
        },
};

ClassMembers: Vec<ClassMember<'a>> = {
    <members:(Lb <ClassMember>)*> Lb? => members,
};

ClassMember: ClassMember<'a> = {
    <member:Member> => member,
    <method:Method> => method,
    <static_member:StaticMember> => static_member,
};

Member: ClassMember<'a> = {
    <start: @L> <vis:Visibility> <name:Identifier> ":" <ty:Type> <end: @R> => {
        let span = Span::new(start, end);
        ClassMember::Member(
            Member {
                visibility: vis,
                name,
                ty,
                span,
            }
        )
    }
};

StaticMember: ClassMember<'a> = {
    <start: @L> <vis:Visibility> "static" <name:Identifier> ":" <ty:Type> <end: @R> => {
        let span = Span::new(start, end);
        ClassMember::StaticMember(
            StaticMember {
                visibility: vis,
                is_const: false,
                name,
                ty,
                value: None,
                span
            }
        )
    },
    <start: @L> <vis:Visibility> "static" <name:Identifier> ":" <ty:Type> Assign <expr:MemberExpr> <end: @R> => {
        let span = Span::new(start, end);
        ClassMember::StaticMember(
            StaticMember {
                visibility: vis,
                is_const: false,
                name,
                ty,
                value: Some(expr),
                span
            }
        )
    },
    <start: @L> <vis:Visibility> "static" "const" <name:Identifier> ":" <ty:Type> <end: @R> => {
            let span = Span::new(start, end);
            ClassMember::StaticMember(
                StaticMember {
                    visibility: vis,
                    is_const: true,
                    name,
                    ty,
                    value: None,
                    span
                }
            )
        },
        <start: @L> <vis:Visibility> "static" "const" <name:Identifier> ":" <ty:Type> Assign <expr:MemberExpr> <end: @R> => {
            let span = Span::new(start, end);
            ClassMember::StaticMember(
                StaticMember {
                    visibility: vis,
                    is_const: true,
                    name,
                    ty,
                    value: Some(expr),
                    span
                }
            )
        }
};

TypeList: Vec<Type<'a>> = {
    "(" ")" => {
        Vec::new()
    },
    "(" <param:Type> <params:("," <Type>)*> ")"=> {
        let mut v = vec![param];
        for p in params.into_iter() {
            v.push(p);
        }
        v
    },
};



Method: ClassMember<'a> = {
    <start: @L> <annotations:MethodAnnotations?> <vis:Visibility> "fn" <name:Identifier> <typaram:TypeParamList?> <params:ParamList> <ret:ReturnType> <body:Block> <end: @R> => {
        let span = Span::new(start, end);
        let type_params = match typaram {
            Some(typ) => typ,
            None => Vec::new(),
        };
        let annotations = match annotations {
            Some(a) => a,
            None => Vec::new(),
        };
        ClassMember::Method(
            Method {
                visibility: vis,
                name,
                annotations,
                type_params,
                parameters: params,
                return_type: ret,
                body,
                span
            }
        )
    }
};

MethodAnnotations: Vec<Annotation<'a>> = {
    <anno:Annotation> <annos:(Lb <Annotation>)*> Lb? => {
        let mut v = vec![anno];
        for a in annos.into_iter() {
            v.push(a);
        }
        v
    }
};

Annotation: Annotation<'a> = {
    <start: @L> "@" <name:Identifier> <end: @R> => {
        Annotation {
            name,
            parameters: Vec::new(),
            span: Span::new(start, end),
        }
    },
    <start: @L> "@" <name:Identifier> "(" <p1:Identifier> <ps:("," <Identifier>)*> ")" <end: @R> => {
        let mut parameters = vec![p1];
        for p in ps.into_iter() {
            parameters.push(p);
        }
        Annotation {
            name,
            parameters,
            span: Span::new(start, end),
        }
    },
};

ParamList: Vec<Parameter<'a>> = {
    "(" <param:Param> <params:("," <Param>)*> ")" => {
        let mut v = vec![param];
        for p in params.into_iter() {
            v.push(p);
        }
        v
    },
    "(" ")" => {
        Vec::new()
    }
};



Param: Parameter<'a> = {
    <start: @L> <name:Pattern> ":" <ty:Type> <end: @R> => {
        Parameter::new_pattern(name, ty, Span::new(start, end))
    },
    <start: @L> <m:("mut")?> "self" <end: @R> => {
        let mutable = match m {
            Some(_) => true,
            None => false,
        };
        Parameter::new_this(mutable, Span::new(start, end))
    },
};

#[inline]
ReturnType: Type<'a> = {
    <ty:("->" <Type>)?> => {
        match ty {
            Some(t) => t,
            None => Type::Void,
        }
    },
};

TypeParamList: Vec<TypeParameter<'a>> = {
    "[" <param:TypeParam> <params:("," <TypeParam>)*> "]" => {
        let mut v = vec![param];
        for p in params.into_iter() {
            v.push(p);
        }
        v
    },
    "[" "]" => {
        Vec::new()
    },

};

TypeParam: TypeParameter<'a> = {
    <start: @L> <name:Identifier> <end: @R> => TypeParameter::new(name, Vec::new(), Span::new(start, end)),
    <start: @L> <name:Identifier> ":" <cons:Constraints> <end: @R> => {
        TypeParameter::new(name, cons, Span::new(start, end))
    }
};


Constraints: Vec<Constraint<'a>> = {
    <cons:Constraint> <conss:(Lb <Constraint>)*> => {
        let mut v = vec![cons];
        for c in conss.into_iter() {
            v.push(c);
        }
        v
    }
};

Constraint: Constraint<'a> = {
    <start: @L> "extends" <ty:Type> <types:(Plus <Type>)*> <end: @R> => {
        let mut v = vec![ty];
        for t in types.into_iter() {
            v.push(t);
        }
        Constraint::Extends(v, Span::new(start, end))
    }
};

BaseType: Type<'a> = {
    "void" => Type::Void,
    "u8" => Type::U8,
    "u16" => Type::U16,
    "u32" => Type::U32,
    "u64" => Type::U64,
    "i8" => Type::I8,
    "i16" => Type::I16,
    "i32" => Type::I32,
    "i64" => Type::I64,
    "char" => Type::Char,
    "str" => Type::Str,
    "f32" => Type::F32,
    "f64" => Type::F64,
};

ObjectType: Type<'a> ={
    <start: @L> <id:Identifier> <end: @R> => {
        Type::Object(id, Span::new(start, end))
    },
};

ArrayType: Type<'a> = {
    <start: @L> "[" <ty:Type> "]" <end: @R> => {
        Type::Array(Box::new(ty), Span::new(start, end))
    },
};

Type: Type<'a> = {
    <ty:BaseType> => ty,
    <ty:ObjectType> => ty,
    <ty:ArrayType> => ty,
    <start: @L> <ty:ObjectType> "[" <arg:Type> <args:("," <Type>)*> "]" <end: @R> => {
        let mut types = vec![arg];
        for t in args.into_iter() {
            types.push(t);
        }
        Type::TypeArg(Box::new(ty), types, Span::new(start, end))
    },
    <f:FunctionType> => f,
    <start: @L> "(" <ty:Type> <tys:("," <Type>)*> ")" <end: @R> => {
        let mut v = vec![ty];
        for t in tys.into_iter() {
            v.push(t);
        }
        Type::Tuple(v, Span::new(start, end))
    }
};



FunctionType: Type<'a> = {
    <start: @L> "fn" "(" ")" <rty:("->" <Type>)?> <end: @R> => {
        let rty = match rty {
            Some(ty) => ty,
            None => Type::Void,
        };
        Type::Function(
            Vec::new(),
            Box::new(rty),
            Span::new(start, end)
        )
    },
    <start: @L> "fn" "(" <param:Type> <params:("," <Type>)*> ")" <rty:("->" <Type>)?> <end: @R> => {
        let rty = match rty {
            Some(ty) => ty,
            None => Type::Void,
        };
        let mut v = vec![param];
        for p in params.into_iter() {
            v.push(p);
        }
        Type::Function(
            v,
            Box::new(rty),
            Span::new(start, end)
        )
    },
};



Block: Vec<Statement<'a>> = {
    "{" Lb? Indent? <expr:Statement> <exprs:(Lb Indent? <Statement>)*> Lb? "}" => {
        let mut v = vec![expr];
        for e in exprs.into_iter() {
            v.push(e);
        }
        v
    },
    "{" Lb* "}" => {
        Vec::new()
    },
};

Statement: Statement<'a> = {
    <start: @L> "let" <id:Pattern> ":" <ty:Type> Assign <rhs:Expr> <end: @R> => {
        Statement::new_let(id, ty, rhs, Span::new(start, end))
    },
    <start: @L> "const" <id:Pattern> ":" <ty:Type> Assign <rhs:Expr> <end: @R> => {
        Statement::new_const(id, ty, rhs, Span::new(start, end))
    },
    <start: @L> <lhs:Expr> Assign <rhs:Expr> <end: @R> => {
        Statement::new_assignment(lhs, rhs, Span::new(start, end))
    },
    <start: @L> <expr:Expr> <end: @R> => {
        Statement::Expression(expr, Span::new(start, end))
    },
    <start: @L> <label:(<Identifier> ":")?> "while" <expr:Expr> <block:Block> <end: @R> => {
        Statement::new_while(label, expr, block, Span::new(start, end))
    },
    <start: @L> <label:(<Identifier> ":")?> "for" <bindings:Pattern> ":" <ty:Type> "in" <expr:Expr> <block:Block> <end: @R> => {
        Statement::new_for(label, bindings, ty, expr, Span::new(start, end))
    },
    <start: @L> "with" <expr:Expr> "as" <pat:Pattern> <ty:(":" <Type>)> <block:Block> <end: @R> => {
        Statement::new_with(expr, pat, ty, block, Span::new(start, end))
    }
};

// TODO: remove Some() from Variable
TermExpr: Expression<'a> = {
    <start: @L> <id:Identifier> <end: @R> => {
        Expression::Variable(id, None, Span::new(start, end))
    },
    <start: @L> "(" <expr:Expr> ")" <end: @R> => Expression::Parenthesized(Box::new(expr), Span::new(start, end)),
    <lit:Literal> => Expression::Literal(lit),
    <start: @L> Minus <expr:TermExpr> <end: @R> => {
        let expr = Box::new(expr);
        Expression::new_unary_operation(UnaryOperator::Neg, expr, Span::new(start, end))
    },
    <start: @L> "self" <end: @R> => {
        Expression::This(Span::new(start, end))
    }
}

MemberExpr: Expression<'a> = {
    <term:TermExpr> => term,
    <start: @L> <obj:MemberExpr> "." <path:Path> <name:Identifier> <end: @R> => {
        let obj = Box::new(obj);
        let mut p = path;
        p.segments.push(name);
        p.span.end = end;
        Expression::new_member_access(obj, p, Span::new(start, end))
    },
    /*<start: @L> <obj:IndexExpr> "." <name:Identifier> <end: @R> => {
        let obj = Box::new(obj);
        let path = PathName::new(vec![name], Span(end - name.len(), end));
        Expression::new_member_access(obj, path, Span::new(start, end))
    },*/
    <start: @L> "new" <id:Type> "(" ")" <end: @R> => {
        Expression::New(id, None, Span::new(start, end))
    },
    <start: @L> "new" "[" <id:Type> Lb <array_size:Expr> "]" <end: @R> => {
        let array_size = Box::new(array_size);
        Expression::New(id, Some(array_size), Span::new(start, end))
    },
    <call:Call> => call,
    /*<start: @L> <path: Path> <id:Type> <end: @R> =>? {
        let mut path = path;
        let Type::Object(name, span) = id else {
            return Err(ParseError::User {
                error: "can only access object types",
            });
        }
        path.segments.push(name);
        path.span.end = span.end;
        Ok(Expression::ClassAccess {
            class_name: path,
            span: Span::new(start, end),
        })
    },*/
};


IndexExpr: Expression<'a> = {
    <term:MemberExpr> => term,
    <start: @L> <lhs:IndexExpr> "[" <expr:Expr> "]" <end: @R> => {
        let lhs = Box::new(lhs);
        let expr = Box::new(expr);
        let span = Span::new(start, end);
        Expression::new_binary_operation(BinaryOperator::Index, lhs, expr, span)
    },
};


Call: Expression<'a> = {
    <start: @L> <start_inner: @L> <obj:MemberExpr> "." <path:Path> <name:Identifier> <end_inner: @R> <args:ArgList> <end: @R> => {
        let obj = Box::new(obj);
        let mut p = path;
        p.segments.push(name);
        p.span.end = end;
        let callee = Expression::new_member_access(obj, p, Span::new(start_inner, end_inner));

        Expression::new_call(Box::new(callee), Vec::new(), args, Span::new(start, end))
    },
    <start: @L> <start_inner: @L> <obj:MemberExpr> "." <path:Path> <name:Identifier> <end_inner: @R> <typeargs:TypeArgList> <args:ArgList> <end: @R> => {
        let obj = Box::new(obj);
        let mut p = path;
        p.segments.push(name);
        p.span.end = end;
        let callee = Expression::new_member_access(obj, p, Span::new(start_inner, end_inner));

        Expression::new_call(Box::new(callee), typeargs, args, Span::new(start, end))
    },
    <start: @L> <start_inner: @L> <path:Path> <name:Identifier> <end_inner: @R> <args:ArgList> <end: @R> => {
        let mut p = path;
        p.segments.push(name);
        p.span.end = end;

        Expression::new_static_call(p, Vec::new(), args, Span::new(start, end))
    },
    <start: @L> <start_inner: @L> <path:Path> <name:Identifier> <end_inner: @R> <typeargs:TypeArgList> <args:ArgList> <end: @R> => {
        let mut p = path;
        p.segments.push(name);
        p.span.end = end;
        p.span.end = end;

        Expression::new_static_call(p, Vec::new(), args, Span::new(start, end))
    },
    //<start: @L> <callee:CallExpr> <typeargs:TypeArgList> <args:ArgList> <end: @R> => Expression::new_call(Box::new(callee), typeargs, args, Span::new(start, end)),
};


ArgList: Vec<Expression<'a>> = {
    "(" <arg:Expr> <args:("," <Expr>)*> ")" => {
        let mut v = vec![arg];
        for a in args.into_iter() {
            v.push(a);
        }
        v
    },
    "(" ")" => Vec::new(),
};

TypeArgList: Vec<Type<'a>> = {
    "::" "[" <arg:Type> <args:("," <Type>)*> "]" => {
        let mut v = vec![arg];
        for a in args.into_iter() {
            v.push(a);
        }
        v
    },
    "::" "[" "]" => Vec::new(),
};

FactorExpr: Expression<'a> = {
    <term:IndexExpr> => term,
    <start: @L> <lhs:FactorExpr> Mult <rhs:IndexExpr> <end: @R> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        Expression::new_binary_operation(BinaryOperator::Mul, lhs, rhs, Span::new(start, end))
    },
    <start: @L> <lhs:FactorExpr> Div <rhs:IndexExpr> <end: @R> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        Expression::new_binary_operation(BinaryOperator::Div, lhs, rhs, Span::new(start, end))
    },
    <start: @L> <lhs:FactorExpr> Mod <rhs:IndexExpr> <end: @R> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        Expression::new_binary_operation(BinaryOperator::Mod, lhs, rhs, Span::new(start, end))
    },
};

ConcatExpr: Expression<'a> = {
    <factor:FactorExpr> => factor,
    <start: @L> <lhs:ConcatExpr> Concat <rhs:FactorExpr> <end: @R> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        Expression::new_binary_operation(BinaryOperator::Concat, lhs, rhs, Span::new(start, end))
    },
};

SumExpr: Expression<'a> = {
    <concat:ConcatExpr> => concat,
    <start: @L> <lhs:SumExpr> Plus <rhs:ConcatExpr> <end: @R> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        Expression::new_binary_operation(BinaryOperator::Add, lhs, rhs, Span::new(start, end))
    },
    <start: @L> <lhs:SumExpr> Minus <rhs:ConcatExpr> <end: @R> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        Expression::new_binary_operation(BinaryOperator::Sub, lhs, rhs, Span::new(start, end))
    },
};

CompareExpr: Expression<'a> = {
    <sum:SumExpr> => sum,
    <start: @L> <lhs:CompareExpr> Equals <rhs:SumExpr> <end: @R> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        Expression::new_binary_operation(BinaryOperator::Eq, lhs, rhs, Span::new(start, end))
    },
    <start: @L> <lhs:CompareExpr> NotEquals <rhs:SumExpr> <end: @R> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        Expression::new_binary_operation(BinaryOperator::Ne, lhs, rhs, Span::new(start, end))
    },
    <start: @L> <lhs:CompareExpr> AngleOpen <rhs:SumExpr> <end: @R> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        Expression::new_binary_operation(BinaryOperator::Lt, lhs, rhs, Span::new(start, end))
    },
    <start: @L> <lhs:CompareExpr> LtE <rhs:SumExpr> <end: @R> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        Expression::new_binary_operation(BinaryOperator::Le, lhs, rhs, Span::new(start, end))
    },
    <start: @L> <lhs:CompareExpr> AngleClose <rhs:SumExpr> <end: @R> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        Expression::new_binary_operation(BinaryOperator::Gt, lhs, rhs, Span::new(start, end))
    },
    <start: @L> <lhs:CompareExpr> GtE <rhs:SumExpr> <end: @R> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        Expression::new_binary_operation(BinaryOperator::Ge, lhs, rhs, Span::new(start, end))
    },
};

NotExpr: Expression<'a> = {
    <start: @L> Not <expr:CompareExpr> <end: @R> => {
        let expr = Box::new(expr);
        Expression::new_unary_operation(UnaryOperator::Not, expr, Span::new(start, end))
    },
    <start: @L> <obj:IndexExpr> "asa" <ty:Type> <end: @R> => {
        Expression::new_as_expression(Box::new(obj), ty, Span::new(start, end))
    },
    <start: @L> <obj:IndexExpr> "into" <ty:BaseType> <end: @R> => {
        Expression::new_into_expression(Box::new(obj), ty, Span::new(start, end))
    },
    <expr:CompareExpr> => expr,
};

ConjExpr: Expression<'a> = {
    <not:NotExpr> => not,
    <start: @L> <lhs:ConjExpr> And <rhs:NotExpr> <end: @R> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        Expression::new_binary_operation(BinaryOperator::And, lhs, rhs, Span::new(start, end))
    },
};

DisjExpr: Expression<'a> = {
    <conj:ConjExpr> => conj,
    <start: @L> <lhs:DisjExpr> Or <rhs:ConjExpr> <end: @R> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        Expression::new_binary_operation(BinaryOperator::Or, lhs, rhs, Span::new(start, end))
    },
};

CallExpr: Expression<'a> = {
    <dis:DisjExpr> => dis,
};

ConditionalExpr: Expression<'a> = {
    <trail:CallExpr> => trail,
    <start: @L> <if_:IfExpr> <end: @R> => Expression::IfExpression(if_, Span::new(start, end)),
    <start: @L> <match_:MatchExpr> <end: @R> => Expression::MatchExpression(match_, Span::new(start, end)),
};



TryExpr: Expression<'a> = {
    <start: @L> <expr:ConditionalExpr> "?" <end: @R> => {
        let expr = Box::new(expr);
        Expression::new_unary_operation(UnaryOperator::Try, expr, Span::new(start, end))
    },
    <expr:ConditionalExpr> => expr,
};




Expr: Expression<'a> = {
    <trye:TryExpr> => trye,
    <start: @L> "return" <expr:Expr> <end: @R> => {
        Expression::Return(Some(Box::new(expr)), Span::new(start, end))
    },
    <lambda:Closure> => lambda,
    <start: @L> <label:(<Identifier> ":")?> "loop" <block:Block> <end: @R> => {
        Expression::new_loop(label, block, Span::new(start, end))
    },
    <start: @L> "break" <label:(":" <Identifier>)?> <expr:TryExpr?> <end: @R> => {
        let expr = expr.map(Box::new);
        Expression::Break(label, expr, Span::new(start, end))
    },
    <start: @L> "continue" <label:Identifier?> <end: @R> => {
        Expression::Continue(label, Span::new(start, end))
    },
};



IfExpr: IfExpression<'a> = {
    <start: @L> "if" <cond:Expr> <then:Block> <end: @R> => {
        let cond = Box::new(cond);
        IfExpression::new(cond, then, None, start, end)
    },
    <start: @L> "if" <cond:Expr> <then:Block> <else_:("else" <Block>)> <end: @R> => {
        let cond = Box::new(cond);
        let else_ = Either::Right(else_);
        IfExpression::new(cond, then, Some(else_), start, end)
    },
    <start: @L> "if" <cond:Expr> <then:Block> <else_:("else" <IfExpr>)> <end: @R> => {
        let cond = Box::new(cond);
        let else_ = Either::Left(Box::new(else_));
        IfExpression::new(cond, then, Some(else_), start, end)
    },
};

MatchExpr: MatchExpression<'a> = {
    <start: @L> "match" <expr:Expr> "{" Lb? <cases:(<MatchCase> Lb?)*> "}" <end: @R> => {
        MatchExpression::new(Box::new(expr), cases, start, end)
    },
};

MatchCase: MatchArm<'a> = {
    <start: @L> <pat:Pattern> "->" <expr:Expr> "," <end: @R> => MatchArm::new(pat, Either::Left(expr), start, end),
    <start: @L> <pat:Pattern> "->" <body:Block> <end: @R> => MatchArm::new(pat, Either::Right(body), start, end),
};

Pattern: Pattern<'a> = {
    <start: @L> <m:"mut"?> <id:Identifier> <end: @R> => {
        let mutable = match m {
            Some(_) => true,
            None => false,
        };
        Pattern::Variable(id, mutable, Span::new(start, end))
    },
    <lit:Constant> => Pattern::Constant(lit),
    <start: @L> "(" <pat:Pattern> <pats:("," <Pattern>)+> ")" <end: @R> => {
        let mut v = vec![pat];
        for p in pats.into_iter() {
            v.push(p);
        }
        Pattern::Tuple(v, Span::new(start, end))
    },
};

Constant: Constant<'a> = {
    <start: @L> <int:Int_lit> <end: @R> => Constant::Integer(int, None, Span::new(start, end)),
    <start: @L> <float:Float_lit> <end: @R> => Constant::Float(float, None, Span::new(start, end)),
    <start: @L> <char:Char_lit> <end: @R> => Constant::Character(char, Span::new(start, end)),
    <start: @L> <string:String_lit> <end: @R> => Constant::String(string, Span::new(start, end)),
    <start: @L> "True" <end: @R> => Constant::Bool(true, Span::new(start, end)),
    <start: @L> "False" <end: @R> => Constant::Bool(false, Span::new(start, end)),
    
};

Literal: Literal<'a> = {
    <constant:Constant> => Literal::Constant(constant),
    <start: @L> "[" "]" <end: @R> => Literal::Array(Vec::new(), None, Span::new(start, end)),
    <start: @L> "[" <expr:Expr> <exprs:("," <Expr>)*> "]" <end: @R> => {
        let mut v = vec![expr];
        for e in exprs.into_iter() {
            v.push(e);
        }
        Literal::Array(v, None, Span::new(start, end))
    },
    <start: @L> "void" <end: @R> => Literal::Void(Span::new(start, end)),
    <t:Tuple> => t,
};

Tuple: Literal<'a> = {
    <start: @L> "(" <expr:Expr> <exprs:("," <Expr>)+> ")" <end: @R> => {
        let mut v = vec![expr];
        for e in exprs.into_iter() {
            v.push(e);
        }
        Literal::Tuple(v, None, Span::new(start, end))
    },
};

Closure: Expression<'a> = {
    <start: @L> <params:ClosureParamList> <ret:ReturnType> Assign <body:Block> <end: @R> => Expression::new_closure(params, Some(ret), body, Span::new(start, end)),
    <start: @L> <body:Block> <end: @R> => Expression::new_closure(Vec::new(), None, body, Span::new(start, end)),
    //<start: @L> <params:ClosureParamList> <ret:ReturnType> <body:Expr> <end: @R> => Closure::new(params, ret, vec![Statement::Expression(body)], start, end),

};


pub ClosureParamList: Vec<ClosureParameter<'a>> = {
    "|" <param:ClosureParam> <params:("," <ClosureParam>)*> "|" => {
        let mut v = vec![param];
        for p in params.into_iter() {
            v.push(p);
        }
        v
    },
    "|" "|" => {
        Vec::new()
    }
};

pub ClosureParam: ClosureParameter<'a> = {
    <start: @L> <name:Pattern> ":" <ty:Type> <end: @R> => {
        ClosureParameter::Typed(Parameter::new_pattern(name, ty, Span::new(start, end)))
    },
    <start: @L> <name:Pattern>  <end: @R> => {
        ClosureParameter::Untyped(name, Span::new(start, end))
    },
};





